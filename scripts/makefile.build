# SPDX-License-Identifier: GPL-2.0-or-later

cmd-info = printf '%-8s%s\n' $1 $(notdir $2)
dot-file = $(dir $1).$(notdir $1)

define if-changed
	$(Q)set -e;	\
	trap "rm -f $(call dot-file, $@).tmp" EXIT; \
	{ $(1); } > $(call dot-file, $@).tmp; \
	if [ ! -r $@ ] || ! cmp -s $@ $(call dot-file, $@).tmp; then \
		$(call cmd-info, UPD, $@); \
		mv -f $(call dot-file, $@).tmp $@; \
	fi
endef

# 'asm-offset.h' header generation.
define sed-offsets
	's/^\.ascii "\(.*\)".*/\1/; \
	/^->/{s:->#\(.*\):/* \1 */:; \
	s:^->\([^ ]*\) [\$$#]*\([^ ]*\) \(.*\):#define \1 \2 /* \3 */:; \
	s:->::; p;}'
endef

define asm-offset
	echo "#ifndef __ASM_OFFSETS_H__"; \
	echo "#define __ASM_OFFSETS_H__"; \
	echo "/** DO NOT MODIFY!! **/"; \
	echo ""; \
	sed -ne $(sed-offsets) < $<; \
	echo ""; \
	echo "#endif /* __ASM_OFFSETS_H__ */"
endef

define descend-make
	$(Q)$(MAKE) -C $(1)
endef

targets := $(filter %.o, $(obj-y))
sub-dir := $(sort $(filter %/, $(obj-y)))

dep-files := $(foreach a-path, $(targets), $(call dot-file, $(a-path)).d)

-include $(dep-files)

cflags = -Wp,-MMD,$(call dot-file,$@).d $(UKERINCLUDE) $(CPPFLAGS) $(CFLAGS) $(CFLAGS-$(@F))
aflags = -Wp,-MMD,$(call dot-file,$@).d $(UKERINCLUDE) $(CPPFLAGS) $(AFLAGS) $(AFLAGS-$(@F))
cppflags = -Wp,-MMD,$(call dot-file,$@).d $(UKERINCLUDE) $(CPPFLAGS)

%.o: %.c
	@$(call cmd-info, CC, $<)
	$(Q)$(CC) $(cflags) -c -o $@ $<

%.o: %.S
	@$(call cmd-info, AS, $<)
	$(Q)$(CC) $(aflags) -c -o $@ $<

%.s: %.c
	@$(call cmd-info, CC, $<)
	$(Q)$(CC) $(cflags) -S -o $@ $<

%.lds: %.lds.S
	@$(call cmd-info, LDS, $<)
	$(Q)$(CPP) $(cppflags) -Wp,-MT,$@ -P -D__ASSEMBLY__ -DLINKER_SCRIPT -o $@ $<

.builtin.o: $(sub-dir) $(targets)
	@$(call cmd-info, LD, $@)
	$(Q)$(LD) $(LDFLAGS) $(targets) $(patsubst %/,%/.builtin.o,$(sub-dir)) -r -o $@

%.elf: .builtin.o
	$(Q)$(LD) $(LDFLAGS) $(LDFLAGS-$(@F)) -o $@ .builtin.o

# Descending ...
$(sub-dir): FORCE
	@printf '%-8s%s\n' DESCEND $@
	$(call descend-make, $@)

rm-files: FORCE
	$(Q)$(foreach a-subdir, $(sub-dir), $(MAKE) -C $(a-subdir) rm-files &&) true
	$(Q)rm -f $(targets) $(dep-files)
	$(Q)rm -rf $(CLEAN_FILES)
	$(Q)rm -f .builtin.o
	$(clean-all)

FORCE:
.PHONY: FORCE

.DEFAULT_GOAL := .builtin.o
.SECONDARY:
